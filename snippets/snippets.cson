'.source.pascal':
  'assignment':
    'prefix': 'variable = value'
    'body': '${1:variable} = ${2:value};$3'
  'array declaration':
    'prefix': 'ARRAY[from..of] OF datatype'
    'body': 'ARRAY[${1:from}..${2:to}] OF ${3:datatype};'
  'array parameter declaration':
    'prefix': 'ARRAY OF datatype'
    'body': 'ARRAY OF ${1:datatype}'
  'begin end block':
    'prefix': 'BEGIN code END;'
    'body': """
      BEGIN
      \t${1:code}
      END;
    """
  'case construct':
    'prefix': 'CASE condition OF consequence END;'
    'body': """
      CASE ${1:condition} OF
      \t${2:consequence}
      END;
    """
  'const':
    'prefix': 'CONST constants'
    'body': """
      CONST
      \t${1:constants}
    """
  'dispose':
    'prefix': 'Dispose(pointer);'
    'body': 'Dispose(${1:pointer});$2'
  'else if':
    'prefix': 'ELSE IF condition THEN BEGIN code END'
    'body': """
      ELSE IF ${1:condition} THEN BEGIN
      \t${2:code}
      END;
    """
  'else':
    'prefix': 'ELSE BEGIN code END'
    'body': """
      ELSE BEGIN
      \t${1:code}
      END;
    """
  'enum':
    'prefix': 'Enumeration enumName = (first, second);'
    'body': 'T${1:EnumName} = (${2:enumOne}, $3);$4'
  'for to array':
    'prefix': 'FOR i := Low(array-name) TO High(array-name)'
    'body': """
      FOR ${1:i} := Low(${2:array-name}) TO High(${2:array-name}) DO BEGIN
      \t$3
      END;
    """
  'for to string':
    'prefix': 'FOR i := 1 TO Length(string-name)'
    'body': """
      FOR ${1:i} := 1 TO Length(${2:string-name}) DO BEGIN
      \t$3
      END;
    """
  'for downto array':
    'prefix': 'FOR i := High(array-name) DOWNTO Low(array-name)'
    'body': """
      FOR ${1:i} := High(${2:array-name}) DOWNTO Low(${2:array-name}) DO BEGIN
      \t$3
      END;
    """
  'for downto string':
    'prefix': 'FOR i := Length(array-name) DOWNTO 1'
    'body': """
      FOR ${1:i} := Length(${2:array-name}) DOWNTO 1 DO BEGIN
      \t$3
      END;
    """
  'for in':
    'prefix': 'FOR MyElem IN MyList'
    'body': """
      FOR ${1:MyElem} IN ${2:MyList} DO BEGIN
      \t$3
      END;
    """
  'free mem':
    'prefix': 'FreeMem(pointer, size-of-releasable-Memory);'
    'body': 'FreeMem(${1:pointer}, ${2:size-of-releasable-Memory});$3'
  'function definition':
    'prefix': 'FUNCTION FunctionName(parameter): returnType;'
    'body': """
      FUNCTION ${1:FunctionName}(${2:parameter}): ${3:returnType};
      BEGIN
      \t${4:code}
      \t${1:FunctionName} := result;
      END;
    """
  'function declaration':
    'prefix': 'FUNCTION FunctionHeadname(parameter): returnType;'
    'body': """
      FUNCTION ${1:FunctionName}(${2:parameter}): ${3:returnType};
    """
  'getmem':
    'prefix': 'GetMem(pointer, size-of-needed-Memory);'
    'body': 'GetMem(${1:pointer}, ${2:size-of-needed-Memory});'
  'if':
    'prefix': 'IF condition THEN BEGIN code END'
    'body': """
      IF ${1:condition} THEN BEGIN
      \t${2:code}
      END;
    """
  'else if':
    'prefix': 'ELSE IF condition THEN BEGIN code END'
    'body': """
      ELSE IF ${1:condition} THEN BEGIN
      \t${2:condition}
      END;
    """
  'else':
    'prefix': 'ELSE BEGIN code END'
    'body': """
      ELSE BEGIN
      \t${1:code}
      END;
    """
  'new':
    'prefix': 'New(pointer);'
    'body': 'New(${1:pointer});'
  'procedure definition':
    'prefix': 'PROCEDURE ProcedureName(parameters); BEGIN code END;'
    'body': """
      PROCEDURE ${1:ProcedureName}(${2:parameters});
      BEGIN
      \t${3:code}
      END;
    """
  'procedure declaration':
    'prefix': 'PROCEDURE ProcedureHeadName(parameters);'
    'body': 'PROCEDURE ${1:ProcedureName}(${2:parameters});'
  'program':
    'prefix': 'PROGRAM program-name VAR variables BEGIN main-code END.'
    'body': """
      PROGRAM ${1:program-name};

      VAR
      \t${3:variables}
      BEGIN
      \t${2:main-code}
      END.
    """
  'readln':
    'prefix': 'ReadLn(target);'
    'body': 'ReadLn(${0:target});'
  'record':
    'prefix': 'RECORD content END;'
    'body': """
      RECORD
      \t${1:content}
      END;
    """
  'repeat until':
    'prefix': 'REPEAT loop-code UNTIL condition-applies);'
    'body': """
      REPEAT
      \t${2:loop-code}
      UNTIL (${1:condition-applies});
    """
  'type':
    'prefix': 'TYPE types'
    'body': """
      TYPE
      \t${1:types}
    """
  'unit':
    'prefix': 'UNIT unit-name INTERFACE public-methods IMPLEMENTATION method-implementations BEGIN initilizations END.'
    'body': """
      UNIT ${1:unit-name};

      INTERFACE
      \t${2:public-methods}

      IMPLEMENTATION
      ${3:method-implementations}

      BEGIN
      \t${4:initilizations}
      END.
    """
  'uses':
    'prefix': 'USES unit-names'
    'body': """
      USES
      \t${1:unit-names}
    """
  'var':
    'prefix': 'VAR variable: datatype'
    'body': """
      VAR
      \t${1:variable}: ${2:datatype};
    """
  'variable declaration':
    'prefix': 'variable: datatype'
    'body': '${1:variable}: ${2:datatype};$3'
  'while-do':
    'prefix': 'WHILE condition DO BEGIN code END;'
    'body': """
      WHILE ${1:condition} DO BEGIN
      \t${2:code}
      END;
    """
  'writeln':
    'prefix': 'WriteLn(output);'
    'body': 'WriteLn(${1:output});$2'
  'writeln lineseperator':
    'prefix': 'WriteLn (empty line seperator)'
    'body': 'WriteLn;$1'
  'write without line break':
    'prefix': 'Write(output) (without line break)'
    'body': 'Write($1);$2'



  'true':
    'prefix': 'TRUE'
    'body': 'TRUE'
  'false':
    'prefix': 'FALSE'
    'body': 'FALSE'



  'datatype byte':
    'prefix': 'BYTE'
    'body': 'BYTE'
  'datatype shortint':
    'prefix': 'SHORTINT'
    'body': 'SHORTINT'
  'datatype char':
    'prefix': 'CHAR'
    'body': 'CHAR'
  'datatype smallint':
    'prefix': 'SMALLINT'
    'body': 'SMALLINT'
  'datatype word':
    'prefix': 'WORD'
    'body': 'WORD'
  'datatype integer':
    'prefix': 'INTEGER'
    'body': 'INTEGER'
  'datatype cardinal':
    'prefix': 'CARDINAL'
    'body': 'CARDINAL'
  'datatype longint':
    'prefix': 'LONGINT'
    'body': 'LONGINT'
  'datatype longword':
    'prefix': 'LONGWORD'
    'body': 'LONGWORD'
  'datatype int64':
    'prefix': 'INT64'
    'body': 'INT64'
  'datatype qword':
    'prefix': 'QWORD'
    'body': 'QWORD'
  'datatype string':
    'prefix': 'STRING'
    'body': 'STRING'
  'datatype real':
    'prefix': 'REAL'
    'body': 'REAL'
  'datatype single':
    'prefix': 'SINGLE'
    'body': 'SINGLE'
  'datatype double':
    'prefix': 'DOUBLE'
    'body': 'DOUBLE'
  'datatype extended':
    'prefix': 'EXTENDED'
    'body': 'EXTENDED'
  'datatype comp':
    'prefix': 'COMP'
    'body': 'COMP'
  'datatype currency':
    'prefix': 'CURRENCY'
    'body': 'CURRENCY'
  'datatype boolean':
    'prefix': 'BOOLEAN'
    'body': 'BOOLEAN'
  'datatype bytebool':
    'prefix': 'BYTEBOOL'
    'body': 'BYTEBOOL'
  'datatype wordbool':
    'prefix': 'WORDBOOL'
    'body': 'WORDBOOL'
  'datatype longbool':
    'prefix': 'LONGBOOL'
    'body': 'LONGBOOL'
